// console3.cpp : 이 파일에는 'main' 함수가 포함됩니다. 거기서 프로그램 실행이 시작되고 종료됩니다.
//

#include <iostream>

using namespace std;

#pragma region 연산자 + 반복문

/*
연산자란?
-- 프로그램이 동작할때 정해져 있는 특정 역할을 수행하는 키워드
ㄴ 연산자를 이용하면 다양한 프로그램 로직을 만들어내는 것이 가능하다.


- 산술 연산자** (+,-,*,/,$)
- 비교 연산자** ( ==, !=,<,>,<=,>=)

 num == num2;   num과 num2가 같다.
 
 num != num2;   num과 num2가 같지 않다.

 num < num2;    num가 num2보다 작다

 num > num2;   num이 num2보다 크다

 num<= num2;   num이 num2보다 작거나 같다.

 num >= num2;  num이 num2보다 크거나 같다.


- 할당 연산자** ( =, +=, -=,*=,/=,%=) 결합방향: 우>좌

+= 
-=
*=
/=
%= 



- 비트 연산자 (&,|,^) - 패스 플레이어 상태값/ 색상값 검출 사용 (디버프) ex) 독, 출혈, 경직
- 효율적 메모리 사용과 빠른 연산이 장점

& 
|
^
~
<<
>>


- 논리 연산자** (&&,||,!)


*** 면접질문 ***
- 형변환 연산자 ex) rand_MAX > (int)32767  ((특정 자료형)
  ㄴ ((특정 자료형)) 변수형
  ㄴ int value = 0;
  ㄴ (float)Value;

  c언어 형변환은 강제 형변환: 논리 보다는 명령우선. 강제로 바꾸기 때문에 리스크가 크다.
  다른 안전한 형변환에 비해 속도가 빠르기 때문에 확신이 있으면 강제 형변환이 좋긴 함.

  ** 강제 형변환에 대하여
  cpu 우선 연산순위에서 밀린다
  float > int 할떄 소숫점 아래 버려짐.
  

  c/c++ 언어는 형변환 연산자를 이용하면 간단하게 해당 변수의 자료형을 변경하는 것이 가능하다.



 반복문이란?
*/

int main()
{
    std::cout << "Hello World!\n";
}

// 프로그램 실행: <Ctrl+F5> 또는 [디버그] > [디버깅하지 않고 시작] 메뉴
// 프로그램 디버그: <F5> 키 또는 [디버그] > [디버깅 시작] 메뉴

// 시작을 위한 팁: 
//   1. [솔루션 탐색기] 창을 사용하여 파일을 추가/관리합니다.
//   2. [팀 탐색기] 창을 사용하여 소스 제어에 연결합니다.
//   3. [출력] 창을 사용하여 빌드 출력 및 기타 메시지를 확인합니다.
//   4. [오류 목록] 창을 사용하여 오류를 봅니다.
//   5. [프로젝트] > [새 항목 추가]로 이동하여 새 코드 파일을 만들거나, [프로젝트] > [기존 항목 추가]로 이동하여 기존 코드 파일을 프로젝트에 추가합니다.
//   6. 나중에 이 프로젝트를 다시 열려면 [파일] > [열기] > [프로젝트]로 이동하고 .sln 파일을 선택합니다.
